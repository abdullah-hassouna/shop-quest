// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./data/dev.db"
}

enum Role {
  BUYER
  ADMIN
}

model User {
  id             String         @id @default(uuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  hashedPassword String
  image          String?
  role           String         @default("USER") // e.g., "USER", "ADMIN"
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Product        Product[]
  Order          Order[]
  Notification   Notification[]
  OTP            OTP[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  icon        String?   @default("https://example.com/default-icon.png") // Default icon URL
  color       String?   @default("#000000") // Default color
  slug        String    @unique
  products    Product[]
  createdAt   DateTime  @default(now())
}

model Image {
  id        String   @id @default(uuid())
  url       String
  alt       String?
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model Product {
  id          String      @id @default(uuid())
  name        String
  price       Float
  description String?
  imagesId    Image[]
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id])
  seller      User        @relation(fields: [sellerId], references: [id])
  sellerId    String
  orders      OrderItem[]
  tags        Tag[]       @relation("ProductTags")
  createdAt   DateTime    @default(now())
}

model Order {
  id        String      @id @default(uuid())
  buyer     User        @relation(fields: [buyerId], references: [id])
  buyerId   String
  items     OrderItem[]
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int     @default(1)
  price     Float
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[] @relation("ProductTags")
}

model OTP {
  id        String   @id @default(uuid())
  userId    String
  User      User     @relation(fields: [userId], references: [id])
  code      String
  expires   DateTime
  createdAt DateTime @default(now())
}

model Settings {
  id        String    @id @default(uuid())
  title     String?   @default("ShopQuest")
  slug      String?   @default("website-slug")
  metadata  String?   @default("{}")
  links     String?   @default("{}")
  logoDark  String?   @default("")
  logoLight String?   @default("")
  favicon   String?   @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}
